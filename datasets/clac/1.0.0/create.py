import os
from pathlib import Path

import pandas as pd

import audformat
import audeer


def main():
    print(os.getcwd())
    description = (
        'The Crowdsourced Language Assessment Corpus (CLAC) consists of audio recordings and automatically-generated '
        'transcripts from 1,832 speakers for several speech and language tasks, '
        'as well as metadata for each of the speakers. '
        'The speaker metadata contains information about the age, gender, years of eduction, residence of each speaker '
        'and whether they had health-related symptoms during the recordings.'
    )
    db = audformat.Database(
        name='clac',
        source='https://groups.csail.mit.edu/sls/downloads/clac/index.cgi',
        description=description,
        languages='en',
        usage=audformat.define.Usage.COMMERCIAL,
        license=audformat.define.License.CC_BY_SA_4_0,

    )
    build_dir = audeer.mkdir('../build')
    audio_path = 'audio'

    db.media['microphone'] = audformat.Media(
        audformat.define.MediaType.AUDIO,
        format='wav',
    )

    # create dataframe with file-wise information given by the folder structure
    file_with_information = []
    for subdir, _, files in os.walk(audio_path):
        for file in files:
            if file.endswith('.wav'):
                task_name = subdir.split('/')[-1]
                speaker_id = int(file.strip('spk.wav'))
                file_with_information.append(
                    {'file': subdir + '/' + file, 'speakerID': speaker_id, 'task-name': task_name,
                     'transcript': Path(subdir + '/' + file.split('.')[0] + '_transcript.txt').read_text()})

    files_df = pd.DataFrame(file_with_information, columns=[
        'file', 'speakerID', 'task-name', 'transcript']).set_index('file')

    db.schemes['speakerID'] = audformat.Scheme(audformat.define.DataType.INTEGER, minimum=1)
    db.schemes['task-name'] = audformat.Scheme(audformat.define.DataType.STRING,
                                               labels=list(set(files_df['task-name'])))
    db.schemes['transcript'] = audformat.Scheme(audformat.define.DataType.STRING,
                                                description='automatically-generated transcripts generated by the '
                                                            'Google Speech Recognition API in 2021')

    db['files'] = audformat.Table(index=files_df.index)

    db['files']['speakerID'] = audformat.Column(scheme_id='speakerID')
    db['files']['speakerID'].set(files_df['speakerID'])

    db['files']['task-name'] = audformat.Column(scheme_id='task-name')
    db['files']['task-name'].set(files_df['task-name'])

    db['files']['transcript'] = audformat.Column(scheme_id='transcript')
    db['files']['transcript'].set(files_df['transcript'])

    metadata_df = pd.read_excel('./metadata.xlsx')

    metadata_df['speakerID'] = [int(speaker.strip('spk.wav')) for speaker in metadata_df['speakerID']]
    metadata_df.replace({'symptoms': {'yes': True, 'no': False}}, inplace=True)

    db.schemes['age'] = audformat.Scheme(audformat.define.DataType.INTEGER, minimum=0, maximum=100)
    db.schemes['education(years)'] = audformat.Scheme(audformat.define.DataType.INTEGER)
    db.schemes['country'] = audformat.Scheme(audformat.define.DataType.STRING,
                                             labels=list(set(metadata_df['worker_country'])),
                                             description='residence country of the speaker')
    db.schemes['region'] = audformat.Scheme(audformat.define.DataType.STRING,
                                            description='residence region of the speaker (mainly US states)')
    db.schemes['city'] = audformat.Scheme(audformat.define.DataType.STRING,
                                          description='residence city of the speaker')
    db.schemes['gender'] = audformat.Scheme(audformat.define.DataType.STRING,
                                            labels=list(set(metadata_df['gender'])))
    db.schemes['symptoms'] = audformat.Scheme(audformat.define.DataType.BOOL,
                                              description='Each speaker was asked to tell whether they had '
                                                          'a cold, allergy, or other health-related symptoms '
                                                          'that might affect their speech')

    db['speaker-metadata'] = audformat.MiscTable(metadata_df['speakerID'])

    db['speaker-metadata']['age'] = audformat.Column(scheme_id='age')
    db['speaker-metadata']['age'].set(metadata_df['age (years)'])

    db['speaker-metadata']['gender'] = audformat.Column(scheme_id='gender')
    db['speaker-metadata']['gender'].set(metadata_df['gender'])

    db['speaker-metadata']['country'] = audformat.Column(scheme_id='country')
    db['speaker-metadata']['country'].set(metadata_df['worker_country'])

    db['speaker-metadata']['region'] = audformat.Column(scheme_id='region')
    db['speaker-metadata']['region'].set(metadata_df['worker_region'])

    db['speaker-metadata']['city'] = audformat.Column(scheme_id='city')
    db['speaker-metadata']['city'].set(metadata_df['worker_city'])

    db['speaker-metadata']['education(years)'] = audformat.Column(scheme_id='education(years)')
    db['speaker-metadata']['education(years)'].set(metadata_df['education (years)'])

    db['speaker-metadata']['symptoms'] = audformat.Column(scheme_id='symptoms')
    db['speaker-metadata']['symptoms'].set(metadata_df['symptoms'])

    db.save(build_dir)


if __name__ == '__main__':
    main()
